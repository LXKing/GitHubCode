<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SparkleLibrary</name>
    </assembly>
    <members>
        <member name="T:BrightIdeasSoftware.AnimationAdapter">
            <summary>
            An AnimationAdapter makes the given Control able to show an Animation.
            </summary>
            <remarks>
            <para>
            To function correctly, the given control must trigger Paint events. 
            That is: panels, buttons, labels, picture boxes, user controls, numeric spin controls, 
            and (oddly enough) data grid view.
            </para>
            </remarks>
            <example>
            AnimationAdapter animatedControl = new AnimationAdapter(this.userControl1);
            Animation animation = animatedControl.Animation;
            // add sprites to animation
            animation.Start();
            </example>
        </member>
        <member name="M:BrightIdeasSoftware.AnimationAdapter.SetAnimationBounds">
            <summary>
            Give the animation its outer bounds. 
            </summary>
            <remarks>
            This is normally the DisplayRectangle of the underlying Control.
            </remarks>
        </member>
        <member name="P:BrightIdeasSoftware.AnimationAdapter.Control">
            <summary>
            Gets or sets the control on which the animation will be drawn
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.AnimationAdapter.Animation">
            <summary>
            Gets or sets the control on which the animation will be drawn
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.AnimationAdapter.SmoothingMode">
            <summary>
            Gets or sets the smoothing mode that will be applied to the 
            graphic context that is used to draw the animation
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.AnimationAdapter.TextRenderingHint">
            <summary>
            Gets or sets the text rendering hint that will be applied to the 
            graphic context that is used to draw the animation
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.IAnimateable.Start">
            <summary>
            This component is being started. It should acquire any resources that it needs
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.IAnimateable.Tick(System.Int64)">
            <summary>
            A unit of time has passed and the animation component should advance its state
            if sufficient time has passed.
            </summary>
            <param name="elapsed">The number of milliseconds since Start() was called.</param>
            <returns>True if Tick() should be called again</returns>
        </member>
        <member name="M:BrightIdeasSoftware.IAnimateable.Reset">
            <summary>
            Revert this component to its initial state. 
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.IAnimateable.Stop">
            <summary>
            This component has been stopped. It should release any resources acquired in Start().
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.IAnimateable.Animation">
            <summary>
            Gets or sets the animation that this component belongs to
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.Animateable">
            <summary>
            A Animateable is the base class for any item that can be 
            placed within an Animation.
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Animateable.Start">
            <summary>
            This component is being started. It should acquire any resources that it needs
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Animateable.Tick(System.Int64)">
            <summary>
            A unit of time has passed and the animation component should advance its state
            if sufficient time has passed.
            </summary>
            <param name="elapsed">The number of milliseconds since Start() was called.</param>
            <returns>True if Tick() should be called again</returns>
        </member>
        <member name="M:BrightIdeasSoftware.Animateable.Reset">
            <summary>
            Revert this component to its initial state. 
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Animateable.Stop">
            <summary>
            This component has been stopped. It should release any resources acquired in Start().
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.Animateable.Animation">
            <summary>
            Gets or sets the animation that this component belongs to
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.Repeat">
            <summary>
            This enum tells the animation how it should behave when it reaches the end
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.Animation">
            <summary>
            An animation is the "canvas" upon which multiple sprites and sounds will be drawn.
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.Invalidate">
            <summary>
            Force the animation to be redrawn
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Force the animation to be redrawn
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.Start">
            <summary>
            Start the story
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.Pause">
            <summary>
            Pause the story
            </summary>
            <remarks>Any sounds that are already playing will continue to play.</remarks>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.Unpause">
            <summary>
            Unpause the story
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.Stop">
            <summary>
            Stop the story.
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.Tick">
            <summary>
            Advance the animation one tick and then redraw.
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.Add(System.Int64,BrightIdeasSoftware.ISprite)">
            <summary>
            Add the given sprite to the animation so that it appears the given
            number of ticks after the animation starts.
            </summary>
            <param name="startTick">How many milliseconds after the animation starts should the sprite appear?</param>
            <param name="sprite">The sprite that will appear</param>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.Add(System.Int64,BrightIdeasSoftware.Audio)">
            <summary>
            Add the given sound to the animation so that it begins to play the given
            number of ticks after the animation starts.
            </summary>
            <param name="startTick">When should  the sound begin to play?</param>
            <param name="sprite">The sprite that will appear</param>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.AddControlBlock(BrightIdeasSoftware.Animation.AnimateableControlBlock)">
            <summary>
            Add the given control block to those used by the animation
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.Timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            The timer has elapsed. Tickle the animation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.TickOnce">
            <summary>
            Advance each sprite by one "tick"
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.Restart">
            <summary>
            The animation has stopped. Restart it from the beginning.
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Animation.Draw(System.Drawing.Graphics)">
            <summary>
            Draw the sprites for this animation onto the given context
            </summary>
            <param name="g">The graphic onto which the animation will draw itself</param>
            <remarks>It's normally a good idea for the given Graphics object to be
            double buffered to cut down on flicker.</remarks>
        </member>
        <member name="P:BrightIdeasSoftware.Animation.Bounds">
            <summary>
            Gets or sets the outer bounds of the animation. All locations will be calculated
            with reference to these bounds.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.Animation.Interval">
            <summary>
            Gets or sets the "tick" interval of the animation in milliseconds.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.Animation.Paused">
            <summary>
            Gets or sets whether the sprites should be paused
            </summary>
            <remarks>Sounds that are already in progress will not be paused.</remarks>
        </member>
        <member name="P:BrightIdeasSoftware.Animation.Running">
            <summary>
            Gets or sets if the animation is running. A animation is running
            when it has been started and not yet stopped. A paused animation
            is still running.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.Animation.Repeat">
            <summary>
            Gets or sets how the animation will behave when it reaches the
            end of the animation.
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.Animation.AnimateableControlBlock">
            <summary>
            Instances of this class are used to control the animation of a component on a animation.
            </summary>
        </member>
        <member name="F:BrightIdeasSoftware.Animation.AnimateableControlBlock.Sprite">
            <summary>
            Gets or sets the sprite that is managed by this control block.
            </summary>
            <remarks>Almost all components are sprites so we keep this property to
            prevent the use of casts.</remarks>
        </member>
        <member name="F:BrightIdeasSoftware.TickEventArgs.Handled">
            <summary>
            Gets or sets if the tick event was completely handled
            </summary>
        </member>
        <member name="F:BrightIdeasSoftware.RedrawEventArgs.Damage">
            <summary>
            Gets the area of the animation that was damaged
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.IEffect">
            <summary>
            An IEffect describes anything that can made a change to a sprite
            over time. 
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.IEffect.Start">
            <summary>
            Signal that this effect is about to applied to its sprite for the first time
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.IEffect.Apply(System.Single)">
            <summary>
            Apply this effect to the underlying sprite
            </summary>
            <param name="fractionDone">How far through the total effect are we?
            This will always in the range 0.0 .. 1.0.</param>
        </member>
        <member name="M:BrightIdeasSoftware.IEffect.Stop">
            <summary>
            The effect has completed
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.IEffect.Reset">
            <summary>
            Reset the effect AND the sprite to its condition before the effect was applied.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.IEffect.Sprite">
            <summary>
            Gets or set the sprite to which the effect will be applied
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.Effect">
            <summary>
            An Effect provides a do-nothing implementation of the IEffect interface,
            plus providing a number of utility methods.
            </summary>
        </member>
        <!-- 对于成员“M:BrightIdeasSoftware.Effect.FromHSB(System.Single,System.Single,System.Single)”忽略有格式错误的 XML 注释 -->
        <member name="T:BrightIdeasSoftware.LocationEffect">
            <summary>
            This abstract class save and restores the location of its target sprite
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.MoveEffect">
            <summary>
            This animation moves from sprite from one calculated point to another
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.GotoEffect">
            <summary>
            This animation moves a sprite to a given point then halts.
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.RotationEffect">
            <summary>
            This animation spins a sprite in place
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.FadeEffect">
            <summary>
            This animation fades/reveals a sprite by altering its opacity
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.BlinkEffect">
            <summary>
            This animation fades a sprite in and out.
            </summary>
            <remarks>
            <para>
            This effect is structured to have a fade in interval, followed by a full visible
            interval, followed by a fade out interval and an invisible interval. The fade in
            and fade out are linear transitions. Any interval can be skipped by passing zero
            for its period.
            </para>
            <para>The intervals are proportions, not absolutes. They are not the milliseconds
            that will be spent in each phase. They are the relative proportions that will be
            spent in each phase.</para>
            <para>To blink more than once, use a Repeater effect.</para>
            <example>
            sprite.Add(0, 1000, new Repeater(4, new BlinkEffect(1, 2, 1, 1)));
            </example>
            </remarks>
        </member>
        <member name="T:BrightIdeasSoftware.ScaleEffect">
            <summary>
            This animation enlarges or shrinks a sprite.
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.BoundsEffect">
            <summary>
            This animation progressively changes the bounds of a sprite
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.RectangleWalkEffect">
            <summary>
            Move the sprite so that it "walks" around the given rectangle
            </summary>
        </member>
        <member name="F:BrightIdeasSoftware.RectangleWalkEffect.RectangleLocator">
            <summary>
            Gets or sets the rectangle around which the sprite will be walked
            </summary>
        </member>
        <member name="F:BrightIdeasSoftware.RectangleWalkEffect.StartPointLocator">
            <summary>
            Gets or sets the locator which will return the point on
            rectangle where the "walk" will begin.
            </summary>
            <remarks>If this is null, the walk will start in the top left.</remarks>
        </member>
        <member name="F:BrightIdeasSoftware.RectangleWalkEffect.AlignmentPointLocator">
            <summary>
            Get or set the locator which will return the point of the sprite
            that will be walked around the rectangle
            </summary>
        </member>
        <member name="F:BrightIdeasSoftware.RectangleWalkEffect.WalkDirection">
            <summary>
            Gets or sets in what direction the walk will proceed
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.PointWalkEffect">
            <summary>
            Move the sprite so that it "walks" along a given series of points
            </summary>
        </member>
        <member name="F:BrightIdeasSoftware.PointWalkEffect.AlignmentPointLocator">
            <summary>
            Get or set the locator which will return the point of the sprite
            that will be walked around the rectangle
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.TickerBoardEffect">
            <summary>
            A TickerBoard clicks through from on text string to another string in a way
            vaguely similar to old style airport tickerboard displays. 
            </summary>
            <remarks>
            This is not a particularly useful class :) Someone might find it helpful.
            </remarks>
        </member>
        <member name="T:BrightIdeasSoftware.Repeater">
            <summary>
            Repeaters operate on another Effect and cause it to repeat one or more times.
            </summary>
            <remarks>
            It does *not* change the duration of the effect. It divides the original effects duration
            into multiple parts.
            </remarks>
            <example>
            animation.Add(0, 1000, new Repeater(4, Effect.Move(Corner.TopLeft, Corner.BottomRight)));
            </example>
        </member>
        <member name="T:BrightIdeasSoftware.GenericEffect`1">
            <summary>
            A GenericEffect allows any property to be set. The
            </summary>
        </member>
        <member name="F:BrightIdeasSoftware.GenericEffect`1.From">
            <summary>
            Gets or set the starting value for this effect
            </summary>
        </member>
        <member name="F:BrightIdeasSoftware.GenericEffect`1.To">
            <summary>
            Gets or sets the ending value
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.GenericEffect`1.GetValue">
            <summary>
            Gets the value of our named property from our sprite
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrightIdeasSoftware.GenericEffect`1.PropertyName">
            <summary>
            Get or set the property that will be changed by this Effect
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.GenericEffect`1.SimpleMunger`1">
            <summary>
            Instances of this class know how to peek and poke values from an object
            using reflection.
            </summary>
            <remarks>
            This is a simplified form of the Munger from the ObjectListView project
            (http://objectlistview.sourceforge.net).
            </remarks>
        </member>
        <member name="M:BrightIdeasSoftware.GenericEffect`1.SimpleMunger`1.GetValue(System.Object)">
            <summary>
            Extract the value indicated by our MemberName from the given target.
            </summary>
            <param name="target">The object that will be peeked</param>
            <returns>The value read from the target</returns>
        </member>
        <member name="M:BrightIdeasSoftware.GenericEffect`1.SimpleMunger`1.PutValue(System.Object,System.Object)">
            <summary>
            Poke the given value into the given target indicated by our MemberName.
            </summary>
            <param name="target">The object that will be poked</param>
            <param name="value">The value that will be poked into the target</param>
        </member>
        <!-- 对于成员“P:BrightIdeasSoftware.GenericEffect`1.SimpleMunger`1.MemberName”忽略有格式错误的 XML 注释 -->
        <member name="T:BrightIdeasSoftware.Effects">
            <summary>
            Factory methods that create commonly useful effects
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Effects.Move(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a Mover that will move a sprite so that the middle of the sprite moves from the given
            proportional location of the animation bounds to the other given proportional location.
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Effects.Move(BrightIdeasSoftware.Corner,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a Mover that will move a sprite so that the given corner moves from the given
            proportional location of the animation bounds to the other given proportional location.
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Effects.Centre(BrightIdeasSoftware.Corner)">
            <summary>
            Creates an animation that keeps the given corner in the centre of the animation
            </summary>
            <param name="cornerToCenter"></param>
            <returns></returns>
        </member>
        <member name="T:BrightIdeasSoftware.Locators">
            <summary>
            Locators is a Factory that simplifies the creation of common locators.
            </summary>
            <remarks>Obviously, locators can still be created directly, but this class
            makes the creation of common locators easy.</remarks>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.At(System.Int32,System.Int32)">
            <summary>
            Create a PointLocator for the given fixed point
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.SpriteAligned(BrightIdeasSoftware.Corner)">
            <summary>
            Create a PointLocator that will align the given corner of a sprite
            at the corresponding corner of the animation.
            </summary>
            <remarks>For example,
            Locators.SpriteAligned(Corners.BottomRight) means the bottom right corner
            of the sprite will be placed at the bottom right corner of the animation.
            </remarks>
            <param name="corner">The corner to be aligned AND the corner at which it will be aligned</param>
            <returns>A point locator</returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.SpriteAligned(BrightIdeasSoftware.Corner,System.Drawing.Point)">
            <summary>
            The same as SpriteAligned(Corner) but offset by a constant amount.
            </summary>
            <param name="corner"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.SpriteAligned(BrightIdeasSoftware.Corner,BrightIdeasSoftware.Corner)">
            <summary>
            Create a PointLocator that will align the given corner of a sprite
            at the given corner of the animation.
            </summary>
            <remarks>For example,
            Locators.SpriteAligned(Corners.MiddleCenter, Corner.BottomRight) means the center
            of the sprite will be placed at the bottom right corner of the animation.
            </remarks>
            <param name="spriteCorner">The corner of the sprite to be aligned</param>
            <param name="corner">The corner at which it will be aligned</param>
            <returns>A point locator</returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.SpriteAligned(BrightIdeasSoftware.Corner,BrightIdeasSoftware.Corner,System.Drawing.Point)">
            <summary>
            The same as SpriteAligned(Corner, Corner) but offset by a constant amount.
            </summary>
            <param name="spriteCorner"></param>
            <param name="animationCorner"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.SpriteAligned(BrightIdeasSoftware.Corner,System.Single,System.Single)">
            <summary>
            Create a PointLocator that will align the given corner of a sprite
            at the proportional location of bounds of the animation.
            </summary>
            <remarks>For example,
            Locators.SpriteAligned(Corners.MiddleCenter, 0.6f, 0.7f) means the center
            of the sprite will be placed 60% across and 70% down the animation.
            </remarks>
            <param name="spriteCorner">The corner of the sprite to be aligned</param>
            <param name="proportionX">The x axis proportion</param>
            <param name="proportionY">The y axis proportion</param>
            <returns>A point locator</returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.SpriteAligned(BrightIdeasSoftware.Corner,System.Single,System.Single,System.Drawing.Point)">
            <summary>
            The same as SpriteAligned(Corner, float, float) but offset by a constant amount.
            </summary>
            <param name="spriteCorner"></param>
            <param name="proportionX"></param>
            <param name="proportionY"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.At(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a FixedRectangleLocator for the given fixed co-ordinates.
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.AnimationBounds">
            <summary>
            Create a Locator that gives the bounds of the animation
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.AnimationBounds(System.Int32,System.Int32)">
            <summary>
            Create a Locator that gives the bounds of the animation inset by a fixed amount
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.SpriteBounds">
            <summary>
            Create a Locator that gives the bounds of the sprite
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.SpriteBounds(System.Int32,System.Int32)">
            <summary>
            Create a Locator that gives the bounds of the sprite inset by a fixed amount
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.SpriteBoundsPoint(BrightIdeasSoftware.Corner)">
            <summary>
            Returns a Locator that gives a point on the bounds of a sprite
            </summary>
            <param name="corner"></param>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.SpriteBoundsPoint(System.Single,System.Single)">
            <summary>
            Returns a Locator that gives a point proportional to the bounds of a sprite
            </summary>
            <param name="proportionX"></param>
            <param name="proportionY"></param>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.AnimationBoundsPoint(BrightIdeasSoftware.Corner)">
            <summary>
            Returns a Locator which gives a corner of the bounds of the animation
            </summary>
            <param name="corner"></param>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.AnimationBoundsPoint(BrightIdeasSoftware.Corner,System.Int32,System.Int32)">
            <summary>
            Returns a Locator which gives a corner of the bounds of the animation inset by a fixed amount
            </summary>
            <param name="corner"></param>
            <param name="xOffset"></param>
            <param name="yOffset"></param>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.Locators.AnimationBoundsPoint(System.Single,System.Single)">
            <summary>
            Returns a Locator that gives a point proportional to the bounds of the animation.
            </summary>
            <param name="proportionX"></param>
            <param name="proportionY"></param>
            <returns></returns>
        </member>
        <member name="T:BrightIdeasSoftware.Corner">
            <summary>
            Corner defines the nine commonly used locations within a rectangle.
            Technically, they are not all "corners".
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.WalkDirection">
            <summary>
            This defines whether a walk proceeds in a clockwise or anticlockwise
            direction.
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.IPointLocator">
            <summary>
            A IPointLocator calculates a point relative to a given sprite.
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.AbstractPointLocator">
            <summary>
            A useful base class for point locators
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.AbstractPointLocator.GetPoint">
            <summary>
            Gets the point from the locator
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.AbstractPointLocator.InitializeSublocators">
            <summary>
            The sprite associate with this locator has changed. 
            Make sure any dependent locators are updated
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.AbstractPointLocator.OffsetBy(System.Drawing.Point)">
            <summary>
            Offset a point by our Offset property
            </summary>
            <param name="pt">The point to be offset</param>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.AbstractPointLocator.InitializeLocator(BrightIdeasSoftware.IPointLocator)">
            <summary>
            Initialize the given locator so it refers to our sprite,
            unless it already refers to another one
            </summary>
            <param name="locator">The locator to be initialized</param>
        </member>
        <member name="M:BrightIdeasSoftware.AbstractPointLocator.InitializeLocator(BrightIdeasSoftware.IRectangleLocator)">
            <summary>
            Initialize the given locator so it refers to our sprite,
            unless it already refers to another one
            </summary>
            <param name="locator">The locator to be initialized</param>
        </member>
        <member name="T:BrightIdeasSoftware.FixedPointLocator">
            <summary>
            A FixedPointLocator simply returns the point with which it is initialized.
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.PointOnRectangleLocator">
            <summary>
            A PointOnRectangleLocator calculate a point relative to rectangle.
            </summary>
            <remarks>
            <para>
            "Relative to a rectangle" can be indicated through a Corner, or through a fraction of
            the width/heights. Giving (0.5f, 0.5f) indicates the middle of the rectangle.
            </para>
            <para>
            The reference rectangle defaults to the bounds
            of the animation
            </para>
            </remarks>
        </member>
        <member name="T:BrightIdeasSoftware.DifferenceLocator">
            <summary>
            An DifferenceLocator is simply the difference between
            two point locators
            </summary>
            <remarks>I can't think of a case where this would actually
            be useful. It might disappear. JPP 2010/02/05</remarks>
        </member>
        <member name="T:BrightIdeasSoftware.AlignedSpriteLocator">
            <summary>
            Instances of this locator return the location that a sprite must 
            move to so that one of its points (SpritePointLocator) is directly 
            over another point (ReferencePointLocator).
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.BaseWalker">
            <summary>
            A BaseWalker provides useful methods to classes that walk between
            a series of point.
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.BaseWalker.Walk(System.Int32,System.Drawing.Point,System.Drawing.Point[])">
            <summary>
            Walk the given distance between the given points, starting at pt.
            Return the point where the walk ends. The walk will loop through
            the point multiple times if necessary to exhaust the distance.
            </summary>
            <param name="distance">How far to walk?</param>
            <param name="pt">Where to start.</param>
            <param name="targetPoints">The control points in order</param>
            <returns>The point where the walk ends</returns>
        </member>
        <member name="M:BrightIdeasSoftware.BaseWalker.CalculateEndPoint(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            Given a start and end points, calculate the point that is
            distance along that line.
            </summary>
            <param name="pt1">Line start point</param>
            <param name="pt2">Line end point</param>
            <param name="distance">Distance from start</param>
            <returns>The point that is 'distance' from the start</returns>
        </member>
        <member name="M:BrightIdeasSoftware.BaseWalker.CalculateDistance(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Calculate the distance between the two points
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="T:BrightIdeasSoftware.PointWalker">
            <summary>
            A PointWalker generates points as if walking between a series of control points.
            The progress through the walk is controlled by the WalkProgress property.
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.RectangleWalker">
            <summary>
            Instances of this locator return points on the perimeter of
            a rectangle.
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.IRectangleLocator">
            <summary>
            A IRectangleLocator calculates a rectangle
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.AbstractRectangleLocator">
            <summary>
            A safe do-nothing implementation of IRectangleLocator plus some useful utilities
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.AbstractRectangleLocator.InitializeSublocators">
            <summary>
            The sprite associate with this locator has changed. 
            Make sure any dependent locators are updated
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.SpriteBoundsLocator">
            <summary>
            A SpritePointLocator calculates a point relative to
            the reference bound of sprite.
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.AnimationBoundsLocator">
            <summary>
            A AnimationBoundsLocator calculates a point 
            on the bounds of whole animation.
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.RectangleFromCornersLocator">
            <summary>
            A RectangleFromCornersLocator calculates its rectangle through two point locators,
            one for the top left, the other for the bottom right. The rectangle
            can also be expanded by a fixed amount.
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.FixedRectangleLocator">
            <summary>
            A FixedRectangleLocator simply returns the rectangle with which it was initialized
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.Audio">
            <summary>
            Instances of this class allow sound to be played at specified
            points within a animation.
            </summary>
            <remarks>
            <para>
            This class uses the SoundPlayer class internally, and thus can
            only handle system sounds and WAV sound files.
            </para>
            <para>A sound that is already playing cannot be paused.</para>
            </remarks>
        </member>
        <member name="M:BrightIdeasSoftware.Audio.FromResource(System.String)">
            <summary>
            Load a sound from a named resource.
            </summary>
            <param name="resourceName">The name of the resource including the trailing ".wav"</param>
            <remarks>To embed a wav file, simple add it to the project, and change "Build Action"
            to "Embedded Resource".</remarks>
            <see cref="!:http://msdn.microsoft.com/en-us/library/ms950960.aspx"/>
        </member>
        <member name="M:BrightIdeasSoftware.Audio.#ctor">
            <summary>
            Create an empty Audio object
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Audio.#ctor(System.String)">
            <summary>
            Creates an Audio object that will play the given "wav" file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:BrightIdeasSoftware.Audio.#ctor(System.Media.SystemSound)">
            <summary>
            Creates an Audio object that will play the given system sound
            </summary>
            <param name="sound"></param>
        </member>
        <member name="F:BrightIdeasSoftware.Audio.FileName">
            <summary>
            Gets or sets the name of the audio file that will be played.
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Audio.Start">
            <summary>
            Start the sound playing
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Audio.Tick(System.Int64)">
            <summary>
            Advance the audio and return if it is done.
            </summary>
            <param name="elapsed"></param>
            <returns></returns>
        </member>
        <member name="M:BrightIdeasSoftware.Audio.Stop">
            <summary>
            Stop the sound
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.ImageSprite">
            <summary>
            An ImageSprite draws an image onto the animation, to which animations can be applied
            </summary>
            <remarks>The image can even be an animated GIF!</remarks>
        </member>
        <member name="T:BrightIdeasSoftware.Sprite">
            <summary>
            A Sprite is an animated graphic. 
            </summary>
            <remarks>
            <para>A sprite is animated by adding effects, which change its properties between frames.</para>
            </remarks>
        </member>
        <member name="M:BrightIdeasSoftware.ISprite.Draw(System.Drawing.Graphics)">
            <summary>
            Draw the sprite in its current state
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:BrightIdeasSoftware.ISprite.Add(BrightIdeasSoftware.IEffect)">
            <summary>
            Add an Effect to this sprite. This effect will run at the beginning of
            the sprite and will have 0 duration.
            </summary>
            <param name="effect">The effect to be applied to the sprite</param>
        </member>
        <member name="M:BrightIdeasSoftware.ISprite.Add(System.Int64,BrightIdeasSoftware.IEffect)">
            <summary>
            Add an Effect to this sprite. This effect will commences startTick's
            after the sprite begins and will have 0 duration
            </summary>
            <param name="startTick">When will the effect begins?</param>
            <param name="effect">What effect will be applied?</param>
        </member>
        <member name="M:BrightIdeasSoftware.ISprite.Add(System.Int64,System.Int64,BrightIdeasSoftware.IEffect)">
            <summary>
            The main entry point for adding effects to Sprites.
            </summary>
            <param name="startTick">When will the effect begin?</param>
            <param name="duration">For how long will it last?</param>
            <param name="effect">What effect will be applied?</param>
        </member>
        <member name="P:BrightIdeasSoftware.ISprite.Location">
            <summary>
            Gets or sets where the sprite is located
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.ISprite.Opacity">
            <summary>
            Gets or sets how transparent the sprite is. 
            0.0 is completely transparent, 1.0 is completely opaque.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.ISprite.Scale">
            <summary>
            Gets or sets the scaling that is applied to the extent of the sprite.
            The location of the sprite is not scaled.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.ISprite.Size">
            <summary>
            Gets or sets the size of the sprite
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.ISprite.Spin">
            <summary>
            Gets or sets the angle in degrees of the sprite.
            0 means no angle, 90 means right edge lifted vertical.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.ISprite.Bounds">
            <summary>
            Gets or sets the bounds of the sprite. This is boundary within which
            the sprite will be drawn.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.ISprite.OuterBounds">
            <summary>
            Gets the outer bounds of this sprite, which is normally the
            bounds of the control that is hosting the story board.
            Nothing outside of this rectangle will be drawn.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.ISprite.ReferenceBounds">
            <summary>
            Gets or sets the reference rectangle in relation to which
            the sprite will be drawn. This is normal the ClientArea of
            the control that is hosting the story board, though it
            could be a subarea of that control (e.g. a particular 
            cell within a ListView).
            </summary>
            <remarks>This value is controlled by ReferenceBoundsLocator property.</remarks>
        </member>
        <member name="P:BrightIdeasSoftware.ISprite.ReferenceBoundsLocator">
            <summary>
            Gets or sets the locator that will calculate the reference rectangle 
            for the sprite.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.ISprite.FixedLocation">
            <summary>
            Gets or sets the point at which this sprite will always be placed.
            </summary>
            <remarks>
            Most sprites play with their location as part of their animation.
            But other just want to stay in the same place. 
            Do not set this if you use Move or Goto effects on the sprite.
            </remarks>
        </member>
        <member name="P:BrightIdeasSoftware.ISprite.FixedBounds">
            <summary>
            Gets or sets the bounds at which this sprite will always be placed.
            </summary>
            <remarks>See remarks on FixedLocation</remarks>
        </member>
        <member name="M:BrightIdeasSoftware.Sprite.#ctor">
            <summary>
            Create new do nothing sprite.
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Sprite.Draw(System.Drawing.Graphics)">
            <summary>
            Draw the sprite in its current state
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:BrightIdeasSoftware.Sprite.Init">
            <summary>
            Set the sprite to its initial state
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Sprite.Tick(System.Int64)">
            <summary>
            The sprite should advance its state.
            </summary>
            <param name="elapsed">Milliseconds since Start() was called</param>
            <returns>True if Tick() should be called again</returns>
        </member>
        <member name="M:BrightIdeasSoftware.Sprite.ApplyFixedLocations">
            <summary>
            Apply any FixedLocation or FixedBounds properties that have been set
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Sprite.Reset">
            <summary>
            Reset the sprite to its neutral state
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Sprite.Stop">
            <summary>
            Stop this sprite
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.Sprite.Add(BrightIdeasSoftware.IEffect)">
            <summary>
            Add a run-once effect which starts with the sprite
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:BrightIdeasSoftware.Sprite.Add(System.Int64,BrightIdeasSoftware.IEffect)">
            <summary>
            Add a run-once effect
            </summary>
            <param name="startTick"></param>
            <param name="effect"></param>
        </member>
        <member name="M:BrightIdeasSoftware.Sprite.Add(System.Int64,System.Int64,BrightIdeasSoftware.IEffect)">
            <summary>
            Add an effect to this sprite
            </summary>
            <param name="startTick">When should the effect begin in ms since Start()</param>
            <param name="duration">For how many milliseconds should the effect continue. 
            0 means the effect will be applied only once.</param>
            <param name="effect">The effect to be applied</param>
        </member>
        <member name="M:BrightIdeasSoftware.Sprite.ApplyState(System.Drawing.Graphics)">
            <summary>
            Apply any graphic state (translation, rotation, scale) to the given graphic context
            </summary>
            <remarks>Once the state is applied, the co-ordinates will be translated so that
            Location is at (0,0). This is necessary for spinning to work. So when the sprite
            draws itself, all its coordinattes should be based on 0,0, not on this.Location.
            This means you cannot use this.Bounds when drawing. 
            g.DrawRectangle(this.Bounds, Pens.Black); will not draw your rectangle where you want.
            g.DrawRectangle(new Rectangle(Point.Empty, this.Size), Pens.Black); will work.</remarks>
            <param name="g">The graphic to be configured</param>
        </member>
        <member name="M:BrightIdeasSoftware.Sprite.UnapplyState(System.Drawing.Graphics)">
            <summary>
            Remove any graphic state applied by ApplyState().
            </summary>
            <param name="g">The graphic to be configured</param>
        </member>
        <member name="P:BrightIdeasSoftware.Sprite.Location">
            <summary>
            Gets or sets where the sprite is located
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.Sprite.Opacity">
            <summary>
            Gets or sets how transparent the sprite is. 
            0.0 is completely transparent, 1.0 is completely opaque.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.Sprite.Scale">
            <summary>
            Gets or sets the scaling that is applied to the extent of the sprite.
            The location of the sprite is not scaled.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.Sprite.Size">
            <summary>
            Gets or sets the size of the sprite
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.Sprite.Spin">
            <summary>
            Gets or sets the angle in degrees of the sprite.
            0 means no angle, 90 means right edge lifted vertical.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.Sprite.SpinAroundOrigin">
            <summary>
            Gets or set if the spinning should be done around the
            top left of the sprite. If this is false, the sprite
            will spin around the center of the sprite.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.Sprite.FixedLocation">
            <summary>
            Gets or sets the point at which this sprite will always be placed.
            </summary>
            <remarks>
            Most sprites play with their location as part of their animation.
            But other just want to stay in the same place. 
            Do not set this if you use Move or Goto effects on the sprite.
            </remarks>
        </member>
        <member name="P:BrightIdeasSoftware.Sprite.FixedBounds">
            <summary>
            Gets or sets the bounds at which this sprite will always be placed.
            </summary>
            <remarks>See remarks on FixedLocation</remarks>
        </member>
        <member name="P:BrightIdeasSoftware.Sprite.Bounds">
            <summary>
            Gets or sets the bounds of the sprite. This is boundary within which
            the sprite will be drawn.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.Sprite.OuterBounds">
            <summary>
            Gets the outer bounds of this sprite, which is normally the
            bounds of the control that is hosting the story board.
            Nothing outside of this rectangle will be drawn.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.Sprite.ReferenceBounds">
            <summary>
            Gets or sets the reference rectangle in relation to which
            the sprite will be drawn. This is normal the ClientArea of
            the control that is hosting the story board, though it
            could be a subarea of that control (e.g. a particular 
            cell within a ListView).
            </summary>
            <remarks>This value is controlled by ReferenceBoundsLocator property.</remarks>
        </member>
        <member name="P:BrightIdeasSoftware.Sprite.ReferenceBoundsLocator">
            <summary>
            Gets or sets the locator that will calculate the reference rectangle 
            for the sprite.
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.Sprite.EffectControlBlock">
            <summary>
            Instances of this class hold the state of an effect as it progresses
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.ImageSprite.OnFrameChanged(System.Object,System.EventArgs)">
            <summary>
            The frame on an animated GIF has changed. Normally we would redraw, but
            we leave that to the animation controller.
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:BrightIdeasSoftware.ImageSprite.DrawTransparentBitmap(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Single)">
            <summary>
            Draw an image in a (possibilty) transluscent fashion
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="image"></param>
            <param name="transparency"></param>
        </member>
        <member name="P:BrightIdeasSoftware.ImageSprite.Size">
            <summary>
            Gets or sets how big the image is
            </summary>
            <remarks>The image size cannot be set, since it is natural size multiplied by 
            the Scale property.</remarks>
        </member>
        <member name="T:BrightIdeasSoftware.ShapeSprite">
            <summary>
            Instances of ShapeSprite draw a geometric shape within their bounds
            </summary>
        </member>
        <member name="F:BrightIdeasSoftware.ShapeSprite.CornerRounding">
            <summary>
            How rounded should the corners of a rounded rectangle be?
            Has no impact on other shapes
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.ShapeSprite.GetRoundedRect(System.Drawing.Rectangle,System.Single)">
            <summary>
            Return a GraphicPath that is a round cornered rectangle
            </summary>
            <param name="rect">The rectangle</param>
            <param name="diameter">The diameter of the corners</param>
            <returns>A round cornered rectagle path</returns>
            <remarks>If I could rely on people using C# 3.0+, this should be
            an extension method of GraphicsPath.</remarks>
        </member>
        <member name="P:BrightIdeasSoftware.ShapeSprite.Filled">
            <summary>
            Gets whether the shape should be drawn filled in
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.ShapeSprite.Lined">
            <summary>
            Gets whether the shape should be drawn with an outline
            </summary>
        </member>
        <member name="F:BrightIdeasSoftware.ParallelogramSprite.HorizontalSide">
            <summary>
            Gets or sets the length of the parallel size of the shape
            </summary>
        </member>
        <member name="F:BrightIdeasSoftware.ParallelogramSprite.SlopeForward">
            <summary>
            Gets or sets if the slope of the parallelogram is forward
            (left edge of bottom is left of the left edge of the top
            </summary>
        </member>
        <member name="T:BrightIdeasSoftware.TextSprite">
            <summary>
            A TextSprite is animated text. Like all Sprites, animation is achieved
            by adding animations to it.
            </summary>
        </member>
        <member name="M:BrightIdeasSoftware.TextSprite.DrawBorderedText(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Single)">
            <summary>
            Draw the text with a border
            </summary>
            <param name="g">The Graphics used for drawing</param>
            <param name="textRect">The bounds within which the text should be drawn</param>
            <param name="text">The text to draw</param>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.Text">
            <summary>
            Gets or sets the text that will be rendered by the sprite
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.Font">
            <summary>
            Gets or sets the font in which the text will be rendered.
            This will be scaled before being used to draw the text.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.ForeColor">
            <summary>
            Gets or sets the color of the text
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.BackColor">
            <summary>
            Gets or sets the background color of the text
            Set this to Color.Empty to not draw a background
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.BorderColor">
            <summary>
            Gets or sets the color of the border around the billboard.
            Set this to Color.Empty to remove the border
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.BorderWidth">
            <summary>
            Gets or sets the width of the border around the text
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.CornerRounding">
            <summary>
            How rounded should the corners of the border be? 0 means no rounding.
            </summary>
            <remarks>If this value is too large, the edges of the border will appear odd.</remarks>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.FontOrDefault">
            <summary>
            Gets the font that will be used to draw the text or a reasonable default
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.HasBackground">
            <summary>
            Does this text have a background?
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.HasBorder">
            <summary>
            Does this overlay have a border?
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.MaximumTextWidth">
            <summary>
            Gets or sets the maximum width of the text. Text longer than this will wrap.
            0 means no maximum.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.StringFormat">
            <summary>
            Gets or sets the formatting that should be used on the text
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.Wrap">
            <summary>
            Gets or sets whether the text will wrap when it exceeds its bounds
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.Size">
            <summary>
            Gets the size of the drawn text. This is always calculated from the 
            natural size of the text when drawn in the correctly scaled font.
            It cannot be set directly.
            </summary>
        </member>
        <member name="P:BrightIdeasSoftware.TextSprite.ActualFont">
            <summary>
            Gets the font that will be used to draw the text. This takes
            scaling into account.
            </summary>
        </member>
    </members>
</doc>
